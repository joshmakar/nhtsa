{"version":3,"sources":["../src/index.ts","../src/helpers/validate-vin.ts","../src/helpers/validate-format.ts"],"sourcesContent":["import axios from 'axios';\nimport validateVin from './helpers/validate-vin';\nimport validateFormat from './helpers/validate-format';\n\nclass NHTSA {\n  static URL_BASE = 'https://vpic.nhtsa.dot.gov/api/vehicles';\n  static DEFAULT_FORMAT = 'JSON';\n\n  static validate(vin: any, format: any, reject: any) {\n    if (!validateFormat(format)) reject(new Error('Invalid format'));\n    if (!validateVin(vin)) reject(new Error('Invalid VIN'));\n  }\n\n  static makeRequest(url: any, resolve: any, reject: any) {\n    axios.get(url).then(\n      response => resolve(response),\n      error => reject(error)\n    );\n  }\n\n  static decodeVin(vin: any, format = this.DEFAULT_FORMAT, modelYear?: any) {\n    return new Promise((resolve, reject) => {\n      this.validate(vin, format, reject);\n\n      const queryString = `?format=${format}${modelYear ? `&modelYear=${modelYear}` : ''}`;\n      const url = `${this.URL_BASE}/DecodeVin/${vin}${queryString}`;\n\n      this.makeRequest(url, resolve, reject);\n    });\n  }\n\n  static decodeVinFlatFormat(vin: any, format = this.DEFAULT_FORMAT, modelYear?: any) {\n    return new Promise((resolve, reject) => {\n      this.validate(vin, format, reject);\n\n      const queryString = `?format=${format}${modelYear ? `&modelYear=${modelYear}` : ''}`;\n      const url = `${this.URL_BASE}/DecodeVinValues/${vin}${queryString}`;\n\n      this.makeRequest(url, resolve, reject);\n    });\n  }\n\n  static decodeVinExtended(vin: any, format = this.DEFAULT_FORMAT, modelYear?: any) {\n    return new Promise((resolve, reject) => {\n      this.validate(vin, format, reject);\n\n      const queryString = `?format=${format}${modelYear ? `&modelYear=${modelYear}` : ''}`;\n      const url = `${this.URL_BASE}/DecodeVinExtended/${vin}${queryString}`;\n\n      this.makeRequest(url, resolve, reject);\n    });\n  }\n\n  static decodeVinExtendedFlatFormat(vin: any, format = this.DEFAULT_FORMAT, modelYear?: any) {\n    return new Promise((resolve, reject) => {\n      this.validate(vin, format, reject);\n\n      const queryString = `?format=${format}${modelYear ? `&modelYear=${modelYear}` : ''}`;\n      const url = `${this.URL_BASE}/DecodeVinValuesExtended/${vin}${queryString}`;\n\n      this.makeRequest(url, resolve, reject);\n    });\n  }\n\n  static decodeWmi(wmi: any, format = this.DEFAULT_FORMAT) {\n    return new Promise((resolve, reject) => {\n      if (!validateFormat(format)) reject(new Error('Invalid format'));\n\n      const queryString = `?format=${format}`;\n      const url = `${this.URL_BASE}/DecodeWMI/${wmi}${queryString}`;\n\n      this.makeRequest(url, resolve, reject);\n    });\n  }\n\n  static decodeSaeWmi(wmi: any, format = this.DEFAULT_FORMAT) {\n    return new Promise((resolve, reject) => {\n      if (!validateFormat(format)) reject(new Error('Invalid format'));\n\n      const queryString = `?format=${format}`;\n      const url = `${this.URL_BASE}/DecodeSAEWMI/${wmi}${queryString}`;\n\n      this.makeRequest(url, resolve, reject);\n    });\n  }\n\n  static getWmisForManufacturer(manufacturer: any, format = this.DEFAULT_FORMAT) {\n    return new Promise((resolve, reject) => {\n      if (!validateFormat(format)) reject(new Error('Invalid format'));\n\n      const queryString = `?format=${format}`;\n      const url = `${this.URL_BASE}/GetWMIsForManufacturer/${manufacturer}${queryString}`;\n\n      this.makeRequest(url, resolve, reject);\n    });\n  }\n\n  static getSaeWmisForManufacturer(manufacturer: any, format = this.DEFAULT_FORMAT) {\n    return new Promise((resolve, reject) => {\n      if (!validateFormat(format)) reject(new Error('Invalid format'));\n\n      const queryString = `?format=${format}`;\n      const url = `${this.URL_BASE}/GetSAEWMIsForManufacturer/${manufacturer}${queryString}`;\n\n      this.makeRequest(url, resolve, reject);\n    });\n  }\n\n  static getAllMakes(format = this.DEFAULT_FORMAT) {\n    return new Promise((resolve, reject) => {\n      if (!validateFormat(format)) reject(new Error('Invalid format'));\n\n      const queryString = `?format=${format}`;\n      const url = `${this.URL_BASE}/getAllMakes${queryString}`;\n\n      this.makeRequest(url, resolve, reject);\n    });\n  }\n\n  static getParts(type: any, fromDate: any, toDate: any, page = 1, format = this.DEFAULT_FORMAT) {\n    return new Promise((resolve, reject) => {\n      if (!type || !['string', 'number'].includes(typeof type)) reject(new Error('Invalid type'));\n      if (!validateFormat(format)) reject(new Error('Invalid format'));\n\n      const queryString = `?type=${type}&fromDate=${fromDate}&toDate=${toDate}&format=${format}&page=${page}`;\n      const url = `${this.URL_BASE}/GetParts${queryString}`;\n\n      this.makeRequest(url, resolve, reject);\n    });\n  }\n\n  static getAllManufacturers(page = 1, format = this.DEFAULT_FORMAT) {\n    return new Promise((resolve, reject) => {\n      if (!validateFormat(format)) reject(new Error('Invalid format'));\n\n      const queryString = `?format=${format}&page=${page}`;\n      const url = `${this.URL_BASE}/GetAllManufacturers${queryString}`;\n\n      this.makeRequest(url, resolve, reject);\n    });\n  }\n\n  static getManufacturerDetails(manufacturer: any, format = this.DEFAULT_FORMAT) {\n    return new Promise((resolve, reject) => {\n      if (!validateFormat(format)) reject(new Error('Invalid format'));\n\n      const queryString = `?format=${format}`;\n      const url = `${this.URL_BASE}/GetManufacturerDetails/${manufacturer}${queryString}`;\n\n      this.makeRequest(url, resolve, reject);\n    });\n  }\n\n  static getMakesForManufacturer(manufacturer: any, format = this.DEFAULT_FORMAT) {\n    return new Promise((resolve, reject) => {\n      if (!validateFormat(format)) reject(new Error('Invalid format'));\n\n      const queryString = `?format=${format}`;\n      const url = `${this.URL_BASE}/getmakeformanufacturer/${manufacturer}${queryString}`;\n\n      this.makeRequest(url, resolve, reject);\n    });\n  }\n\n  static getMakesForManufacturerAndYear(manufacturer: any, year: any, format = this.DEFAULT_FORMAT) {\n    return new Promise((resolve, reject) => {\n      if (!validateFormat(format)) reject(new Error('Invalid format'));\n\n      const queryString = `year=${year}?format=${format}`;\n      const url = `${this.URL_BASE}/getmakeformanufacturer/${manufacturer}${queryString}`;\n\n      return this.makeRequest(url, resolve, reject);\n    });\n  }\n}\n\nexport default NHTSA;","const validateVIN = (vin: string) => {\n  vin = vin.toLowerCase();\n\n  if (!/^[a-hj-npr-z0-9]{8}[0-9xX][a-hj-npr-z0-9]{8}$/.test(vin)) {\n    return false;\n  }\n\n  const transliterationTable: { [key: string]: number } = {\n    '0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8,\n    '9': 9, 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8,\n    'j': 1, 'k': 2, 'l': 3, 'm': 4, 'n': 5, 'p': 7, 'r': 9, 's': 2, 't': 3,\n    'u': 4, 'v': 5, 'w': 6, 'x': 7, 'y': 8, 'z': 9\n  };\n\n  const weightsTable = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2];\n  let sum = 0;\n\n  for (let i = 0; i < vin.length; ++i) {\n    sum += transliterationTable[vin.charAt(i)] * weightsTable[i];\n  }\n\n  const mod = sum % 11;\n\n  return mod === 10 ? vin.charAt(8) === 'x' : vin.charAt(8) === String(mod);\n};\n\nexport default validateVIN;\n","const validateFormat = (format: string) => {\n  if (!format) return false;\n  if (typeof format !== 'string') return false;\n\n  const allowedFormats = ['JSON', 'JSV', 'CSV', 'XML'];\n\n  return allowedFormats.includes(format.toUpperCase());\n};\n\nexport default validateFormat;\n"],"mappings":"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","names":[]}